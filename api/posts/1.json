{"total":18,"pageSize":13,"pageCount":2,"data":[{"title":"Start","uid":"e38905ad1968dd93d6be591395b50e19","slug":"strat","date":"3333-03-27T05:48:25.000Z","updated":"2022-05-05T10:41:00.147Z","comments":true,"path":"api/articles/strat.json","cover":"https://scpic.chinaz.net/files/pic/pic9/201803/wpic078.jpg","text":"谨以此站记录本人知识积累——Stay hungry Stay foolish","link":"","photos":[],"count_time":{"symbolsCount":45,"symbolsTime":"1 mins."},"categories":[{"name":"Begin","slug":"Begin","count":1,"path":"api/categories/Begin.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"监控系统","uid":"d92ff721ecc7f2b8c5a903b25ff0b67c","slug":"k8s3","date":"2022-07-17T15:22:34.206Z","updated":"2022-07-17T15:24:53.456Z","comments":true,"path":"api/articles/k8s3.json","cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","text":"前言监控是整个运维乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供详细的数据用于追查定位问题都依赖于监控，随着PASS层的落地，微服务架构的兴起，监控更是不可缺少的一环，而监控不仅仅是一个组件，而是一个体系，系统，需要有一个完善的生态系统来支撑。通过本文，我们能...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"K8s-集群监控","uid":"436f5c4cd9584648ea4f3adf32eabb95","slug":"k8s4","date":"2022-06-29T10:49:36.000Z","updated":"2022-07-17T15:25:16.217Z","comments":true,"path":"api/articles/k8s4.json","cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","text":" 背景随着k8s的崛起，我们迎来了PASS层的落地，服务的部署愈发方便，但为服务提供支持的架构却愈发具有挑战性，在k8s中，多个服务和命名空间可以跨基础设施分布，每个服务都是由 pods 组成，而 pod 可以包含一个或多个容器。从底层服务的架构来说是变得复杂，所以为了更好的掌握...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"浅析RPC框架","uid":"6baa7e0b0cfe666ab7d296eb78705886","slug":"rpc","date":"2022-05-12T05:48:25.000Z","updated":"2022-05-12T08:34:01.600Z","comments":true,"path":"api/articles/rpc.json","cover":"https://pic4.zhimg.com/v2-45d69c22c7149dcf15fc4f6320d400f3_r.jpg","text":"RPC框架基础概念 背景 IPC（进程间的通信）可以有多种方式，比如本地调用，或者通过网络实现远程调用，而rpc就是在微服务的背景下实现的一种通过网络远程服务调用的一种协议。 概念 RPC（远程过程调用，简单的理解是一个节点请求另一个节点提供的服务 ） 本地过程调用和远程调用 本...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Frame","slug":"Frame","count":1,"path":"api/categories/Frame.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"golang-基础","uid":"7c23f20e9197b6064d9ced0e7cb118d0","slug":"golang","date":"2022-04-26T05:48:25.000Z","updated":"2022-05-05T05:42:53.690Z","comments":true,"path":"api/articles/golang.json","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.pRx-ilihnVX98A3VQGqgPgHaEK?w=314&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7","text":"Golang基础语法概述 Go语言也称为 Golang，是由 Google 公司开发的一种静态强类型、编译型、并发型、并具有垃圾回收功能的编程语言。 特点： 语法简单 并发模型 Go语言的并发是基于 goroutine 的，goroutine 类似于线程，但并非线程。可以将 go...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Golang","slug":"Golang","count":1,"path":"api/categories/Golang.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"K8s-核心机制","uid":"2e106d38702b9bd0bc9485bd6f08ef7e","slug":"k8s2","date":"2021-09-26T10:49:36.000Z","updated":"2022-05-05T11:42:43.296Z","comments":true,"path":"api/articles/k8s2.json","cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","text":"浅谈对K8s的理解 最初接触k8s是学完docker后，有了docker这个“集装箱”后，自然而然需要对容器进行编排，所以就开始学习k8s，最开始就觉得k8s就是个运维工具，是个功能强大的运维工具，负责编排容器等工作，以学习一门工具的思维看了k8s调度，网络，存储，控制器等相关的...","link":"","photos":[],"count_time":{"symbolsCount":577,"symbolsTime":"1 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"K8s","uid":"8b277fff122412f48b0619581df54238","slug":"K8s1","date":"2021-08-26T10:49:36.000Z","updated":"2022-05-05T11:54:05.126Z","comments":true,"path":"api/articles/K8s1.json","cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","text":"K8s概述前置知识 容器的本质是一种特殊的进程 容器的隔离和资源限制实现 namespace 相当于一个障眼法，利用linux的namespace机制实现隔离，而一个个docker实际上是一个个特殊的进程 Namespace 技术实际上修改了应用进程看待整个计算机“视 图”，即它...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"Net-OSPF之负载均衡","uid":"0df63ec25452415f0b2c8961aba42a85","slug":"net4","date":"2021-08-02T05:48:25.000Z","updated":"2022-05-05T05:56:59.601Z","comments":true,"path":"api/articles/net4.json","cover":"https://tse1-mm.cn.bing.net/th/id/R-C.a6b35d0ceff922dbb8ca6678339670c7?rik=OzaOFa32Ojvp7w&riu=http%3a%2f%2fsrc.sotu114.com%2fdata%2fattachment%2fforum%2f202003%2f27%2f145613dpujyuu1v1pztjbd.item.jpg-ture&ehk=EyuUwO0luJ3fTRSq40kKShnm0d5Hwxdx3z56we%2fOoEM%3d&risl=&pid=ImgRaw&r=0","text":"这篇内容主要为了解，具体的功能技术实现自己并未动手操作，但是这篇内容最大的启示是ospf的功能不仅仅是AS内的发现和计算路由，还有其他功能，我们学习一种技术时不能局限于技术本身，而是要善用技术，这样才能真正理解相关技术，从而做到融会贯通 概述： 关于ospf： ​ OSPF(Op...","link":"","photos":[],"count_time":{"symbolsCount":972,"symbolsTime":"1 mins."},"categories":[{"name":"Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"docker","date":"2021-05-16T05:48:25.000Z","updated":"2022-05-05T05:54:00.706Z","comments":true,"path":"api/articles/docker.json","cover":"https://pic4.zhimg.com/v2-68b55eca7e54ac6b7e3dae441e193827_720w.jpg?source=172ae18b","text":"Docker概述 是什么 是一款容器引擎，是一个用于开发，交付和运行应用程序的开放平台 作用 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 （应用和相关依赖环境一起打包到容器当中）解决...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Java-项目总结","uid":"52bf4c42f2d4889a67cc0b2c3cdd70c7","slug":"java5","date":"2021-05-11T05:48:25.000Z","updated":"2022-05-05T05:53:20.176Z","comments":true,"path":"api/articles/java5.json","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.1Z2MHtWto46_PjbpOCqlwQHaEK?pid=ImgDet&rs=1","text":"SBMS项目笔记前置知识Servlet 是什么 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类 （一般开发都继承Httpservlet来实现） 作用 主要功能在于交互式地浏览和修改数据 理解： 在MVC三层架构中，...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"CloudComputing-初识","uid":"8abdb583e8b93346cd23da8d5b3ea2a5","slug":"cloudComputing","date":"2021-04-26T05:48:25.000Z","updated":"2022-05-05T05:55:28.472Z","comments":true,"path":"api/articles/cloudComputing.json","cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.NGAFJOulgllRiPPWFBtUYAHaED?w=327&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7","text":"云计算 是什么 网络+计算 在服务角度层面： 像自来水一样提供基础的算力服务，Iass Pass Sass 技术层面来说 以虚拟化为核心技术进行资源池化，以云管理平台对资源进行调配实现云计算的技术 服务的三层平台理解 三层模型 Iass 提供底层的硬件资源 Pass 提供平台应用...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"CloudComputing","slug":"CloudComputing","count":1,"path":"api/categories/CloudComputing.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Net-技术拓展","uid":"0d5b4ab158060e81e0a6127529557325","slug":"net2","date":"2021-04-26T05:48:25.000Z","updated":"2022-05-05T05:56:41.806Z","comments":true,"path":"api/articles/net2.json","cover":"https://tse1-mm.cn.bing.net/th/id/R-C.a6b35d0ceff922dbb8ca6678339670c7?rik=OzaOFa32Ojvp7w&riu=http%3a%2f%2fsrc.sotu114.com%2fdata%2fattachment%2fforum%2f202003%2f27%2f145613dpujyuu1v1pztjbd.item.jpg-ture&ehk=EyuUwO0luJ3fTRSq40kKShnm0d5Hwxdx3z56we%2fOoEM%3d&risl=&pid=ImgRaw&r=0","text":"CGN 定义： 翻译为运营商级地址转换（运营商级NAT），又称作LSN（Large-scale NAT，大规模网络地址转换），是一种基于NAT的更高级应用技术。 个人理解： 就是使用了两次的nat地址转换 地址分配 除了分配的三类私网ip地址，还专门为CGN预留了一个 “共享地址...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Java-面对对象","uid":"a64196a02ebbcb9126814b321ce99582","slug":"java2","date":"2021-04-11T05:48:25.000Z","updated":"2022-05-05T05:51:11.165Z","comments":true,"path":"api/articles/java2.json","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.1Z2MHtWto46_PjbpOCqlwQHaEK?pid=ImgDet&rs=1","text":"面对对象类 方法 方法的参数传递问题 传递基本数据类型和引用数据类型的区别 传递可变参数 方法的重载 就是相同的方法中，只有参数不同，从而匹配不同的同名方法。 构造方法（构造器） 注意会默认调用父类的构造器，所以子类在实例化的时候要注意 抽象类 理解：因为类可以被继承，并且子类可...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}