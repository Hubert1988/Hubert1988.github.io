{"title":"K8s-核心机制","uid":"2e106d38702b9bd0bc9485bd6f08ef7e","slug":"k8s2","date":"2021-09-26T10:49:36.000Z","updated":"2022-05-05T11:42:43.296Z","comments":true,"path":"api/articles/k8s2.json","keywords":null,"cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","content":"<h2 id=\"浅谈对K8s的理解\"><a href=\"#浅谈对K8s的理解\" class=\"headerlink\" title=\"浅谈对K8s的理解\"></a>浅谈对K8s的理解</h2><ul>\n<li>最初接触k8s是学完docker后，有了docker这个“集装箱”后，自然而然需要对容器进行编排，所以就开始学习k8s，最开始就觉得k8s就是个运维工具，是个功能强大的运维工具，负责编排容器等工作，以学习一门工具的思维看了k8s调度，网络，存储，控制器等相关的内容，虽然看了一遍，感觉学会了，但又没学会，并没有理解k8s，后来，理解了k8s的设计核心：<strong>控制器模式和声明式API</strong>，首先什么是控制器模式？可以简单的理解为一个循环反馈过程，例如房间里的温度自动调节器。当用户设置了温度，告诉了温度自动调节器的期望状态，房间的实际温度是当前状态。通过对设备的开关控制，温度自动调节器让其当前状态接近期望状态。控制器通过温度传感器感知室内的温度变化，并致力于将当前室内温度转变为期望的温度。而K8s就是借鉴了这种模式，通过声明式API来描述理想状态，k8s会利用控制器自动的比较，不断的调整，最后让实际状态变成自己描述的理想状态，而这个过程，使用者无需关心内部的操作，只需要老老实实的当“大爷”，声明自己想要的理想状态即可（即API），而正是这种<strong>控制器模式和声明式API的协作</strong>，让开发者可以有能力去关心自己开发的应用的运行状态和运维方法，而不用去关心底层的操作，最终推动了pass的落地，而k8s如今是作为云计算的平台层，是<strong>云计算的操作系统</strong></li>\n</ul>\n","feature":false,"text":"浅谈对K8s的理解 最初接触k8s是学完docker后，有了docker这个“集装箱”后，自然而然需要对容器进行编排，所以就开始学习k8s，最开始就觉得k8s就是个运维工具，是个功能强大的运维工具，负责编排容器等工作，以学习一门工具的思维看了k8s调度，网络，存储，控制器等相关的...","link":"","photos":[],"count_time":{"symbolsCount":577,"symbolsTime":"1 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%85%E8%B0%88%E5%AF%B9K8s%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">浅谈对K8s的理解</span></a></li></ol>","author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"golang-基础","uid":"7c23f20e9197b6064d9ced0e7cb118d0","slug":"golang","date":"2022-04-26T05:48:25.000Z","updated":"2022-05-05T05:42:53.690Z","comments":true,"path":"api/articles/golang.json","keywords":null,"cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.pRx-ilihnVX98A3VQGqgPgHaEK?w=314&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7","text":"Golang基础语法概述 Go语言也称为 Golang，是由 Google 公司开发的一种静态强类型、编译型、并发型、并具有垃圾回收功能的编程语言。 特点： 语法简单 并发模型 Go语言的并发是基于 goroutine 的，goroutine 类似于线程，但并非线程。可以将 go...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Golang","slug":"Golang","count":1,"path":"api/categories/Golang.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"K8s","uid":"8b277fff122412f48b0619581df54238","slug":"K8s1","date":"2021-08-26T10:49:36.000Z","updated":"2022-05-05T11:54:05.126Z","comments":true,"path":"api/articles/K8s1.json","keywords":null,"cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","text":"K8s概述前置知识 容器的本质是一种特殊的进程 容器的隔离和资源限制实现 namespace 相当于一个障眼法，利用linux的namespace机制实现隔离，而一个个docker实际上是一个个特殊的进程 Namespace 技术实际上修改了应用进程看待整个计算机“视 图”，即它...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}