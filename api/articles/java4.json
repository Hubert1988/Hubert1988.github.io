{"title":"Java-字符串","uid":"f074b92e2bf809e27da1254814ebde33","slug":"java4","date":"2021-04-05T05:48:25.000Z","updated":"2022-05-05T03:00:05.864Z","comments":true,"path":"api/articles/java4.json","keywords":null,"cover":"https://wx1.sinaimg.cn/mw1024/008srJVCly1h1xbqioae2j31gi0u0god.jpg","content":"<h2 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h2><ul>\n<li><p>String</p>\n<ol>\n<li><p><strong>创建的两种方法以及原理浅析：</strong>（重点）</p>\n<ul>\n<li>直接创建</li>\n<li>构造函数创建</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String s1 &#x3D; &quot;Runoob&quot;;              &#x2F;&#x2F; String 直接创建\nString s2 &#x3D; &quot;Runoob&quot;;              &#x2F;&#x2F; String 直接创建\nString s3 &#x3D; s1;                    &#x2F;&#x2F; 相同引用\nString s4 &#x3D; new String(&quot;Runoob&quot;);   &#x2F;&#x2F; String 对象创建\nString s5 &#x3D; new String(&quot;Runoob&quot;);   &#x2F;&#x2F; String 对象创建</code></pre>\n\n<ul>\n<li><p>三个空间： <strong>字符串常量池</strong> （存放字符串的值）  <strong>堆</strong>（存放对象）  <strong>栈</strong>（存放变量名）</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/008srJVCgy1h0pvzhx62ij30rk0d37ag.jpg\"></p>\n</li>\n<li><p>引用对象在编译器无法确定，只能在运行期确定，所以引用对象相加会在堆空间创建新对象</p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/008srJVCly1h0pwac36rzj30jy0663ys.jpg\"></p>\n</li>\n<li><p>总结</p>\n<ul>\n<li><p>String s1 &#x3D; “a”;  说明：在字符串常量池中创建了一个字面量为”a”的字符串。</p>\n</li>\n<li><p>s1 &#x3D; s1 + “b”;  说明：实际上原来的“a”字符串对象已经丢弃了，现在在堆空间中产生了一个字符 串s1+”b”（也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本 字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响 程序的性能。</p>\n</li>\n<li><p>String s2 &#x3D; “ab”; 说明：直接在字符串常量池中创建一个字面量为”ab”的字符串。</p>\n</li>\n<li><p>String s3 &#x3D; “a” + “b”; 说明：s3指向字符串常量池中已经创建的”ab”的字符串。</p>\n</li>\n<li><p>String s4 &#x3D; s1.intern(); 说明：堆空间的s1对象在调用intern()之后，会将常量池中已经存在的”ab”字符串 赋值给s4。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点：</p>\n</li>\n<li><ul>\n<li><strong>“String对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象”</strong>。</li>\n</ul>\n</li>\n<li><p>和其他类型数据进行转换</p>\n<ul>\n<li><p>字符数组 —&gt; 字符串</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String s &#x3D; new String(数组名称);</code></pre>\n</li>\n<li><p>字符串—&gt; 字符数组</p>\n</li>\n</ul>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">char[] arr &#x3D; str.toCharArray()</code></pre>\n\n<ul>\n<li><p>String —&gt;基本数据类型，包装类</p>\n<ul>\n<li><p>包装类.parse基本数据类型（字符串）</p>\n</li>\n<li><p>&#96;&#96;&#96;java<br>int num &#x3D; Intenger.parseInt（s）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- 基本数据类型，包装类 ---&gt;String\n\n  - String.valueOf(基本数据，包装类)\n\n  - &#96;&#96;&#96;java\n    String.valueOf(基本数据，包装类)</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>相关方法</strong> <strong>（别无他法，只能多用，多记，多做）</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>int length()：返回字符串的长度： return value.length</p>\n</li>\n<li><p>char charAt(int index)： 返回某索引处的字符return value[index]</p>\n</li>\n<li><p>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0</p>\n</li>\n<li><p>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</p>\n</li>\n<li><p>String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</p>\n</li>\n<li><p>String trim()：返回字符串的副本，忽略前导空白和尾部空白</p>\n</li>\n<li><p>boolean equals(Object obj)：比较字符串的内容是否相同</p>\n</li>\n<li><p>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</p>\n</li>\n<li><p>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</p>\n</li>\n<li><p>int compareTo(String anotherString)：比较两个字符串的大小</p>\n</li>\n<li><p>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</p>\n</li>\n<li><p>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</p>\n</li>\n<li><p>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</p>\n</li>\n<li><p>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</p>\n</li>\n<li><p>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</p>\n</li>\n<li><p>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</p>\n</li>\n<li><p>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</p>\n</li>\n<li><p>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</p>\n</li>\n<li><p>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</p>\n</li>\n<li><p>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</p>\n</li>\n</ul>\n<p>​    注：indexOf和lastIndexOf方法如果未找到都是返回-1</p>\n<ul>\n<li><p>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</p>\n</li>\n<li><p>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</p>\n</li>\n<li><p>String replaceAll(String regex, String replacement) ： 使 用 给 定 的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</p>\n</li>\n<li><p>String replaceFirst(String regex, String replacement) ： 使 用 给 定 的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式</p>\n</li>\n<li><p>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</p>\n</li>\n<li><p>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</p>\n</li>\n</ul></blockquote>\n</li>\n</ol>\n</li>\n<li><p>StringBuilder </p>\n<ul>\n<li><p>它是一个可变对象，可以预分配缓冲区 ，相比于与String，不需要清除空间并且重新写入，而是在原来空间进行修改</p>\n<ul>\n<li><pre><code class=\"java\">可以链式调用， 因为调用方法后返回了 this 即返回了对象\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        var sb = new StringBuilder(1024);\n        sb.append(&quot;Mr &quot;)\n          .append(&quot;Bob&quot;)\n          .append(&quot;!&quot;)\n          .insert(0, &quot;Hello, &quot;);\n        System.out.println(sb.toString());\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>线程不安全</p>\n</li>\n</ul>\n</li>\n<li><p><code>StringBuffer</code>是Java早期的一个<code>StringBuilder</code>的线程安全版本</p>\n</li>\n</ul>\n</li>\n</ul>\n","text":"String类 String 创建的两种方法以及原理浅析：（重点） 直接创建 构造函数创建 String s1 &#x3D; &quot;Runoob&quot;; &#x2F;&#x2F; String 直接创建 String s2 &#x3D; &quot;Runoob&qu...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#String%E7%B1%BB\"><span class=\"toc-text\">String类</span></a></li></ol>","author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Net-路由协议","uid":"6680b6536ab34550098dc51e7750bdac","slug":"net1","date":"2021-04-08T05:48:25.000Z","updated":"2022-05-05T02:42:16.480Z","comments":true,"path":"api/articles/net1.json","keywords":null,"cover":"https://wx2.sinaimg.cn/thumb300/008srJVCly1h1xbqv4c4hj30rs0dwdid.jpg","text":"路由协议总述 动态路由协议 IGP（内部网关协议） 主要为路由发现和计算 RIP OSPF EGP（外部网关协议） 主要为路由选择和控制 BGP EBGP IBGP OSPF： 开放最短路径优先，IP传输，使用的协议号为89 因为是采用了IP协议传输，所以OSPF在网络层来看本身...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java-数组","uid":"fc1d81b19b3e79145fb3db27c32bb9d6","slug":"java3","date":"2021-04-03T05:48:25.000Z","updated":"2022-05-05T02:59:57.568Z","comments":true,"path":"api/articles/java3.json","keywords":null,"cover":"https://wx1.sinaimg.cn/mw1024/008srJVCly1h1xbqioae2j31gi0u0god.jpg","text":" 数组（掌握操作方法） 数组是用来存储固定长度的同类型元素 注意： 如果存储的为引用数据类型时，改变值时，实际是创建新的值并改变指针指向（常见于字符串数组，因为字符串无法改变） 所以关于字符串数组排序后，改变的不是值的顺序，而知指针的顺序 数组的操作 定义 int[] arr &...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}