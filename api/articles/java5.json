{"title":"Java-项目总结","uid":"52bf4c42f2d4889a67cc0b2c3cdd70c7","slug":"java5","date":"2021-05-11T05:48:25.000Z","updated":"2022-05-05T03:00:19.690Z","comments":true,"path":"api/articles/java5.json","keywords":null,"cover":"https://wx1.sinaimg.cn/mw1024/008srJVCly1h1xbqioae2j31gi0u0god.jpg","content":"<h1 id=\"SBMS项目笔记\"><a href=\"#SBMS项目笔记\" class=\"headerlink\" title=\"SBMS项目笔记\"></a>SBMS项目笔记</h1><h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><ul>\n<li>是什么<ul>\n<li><strong>狭义</strong>的Servlet是指Java语言实现的一个<a href=\"https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3\">接口</a>，<strong>广义</strong>的Servlet是指任何实现了这个Servlet接口的<a href=\"https://zh.wikipedia.org/wiki/%E7%B1%BB_%28%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%29\">类</a> （一般开发都继承Httpservlet来实现）</li>\n</ul>\n</li>\n<li>作用<ul>\n<li>主要功能在于交互式地浏览和修改数据 </li>\n<li>理解：<ul>\n<li>在MVC三层架构中，servlet处于C（控制层），简单点说就是接受前端来的参数，然后调用M层的逻辑调用，然后返回和转跳响应内容</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>工作原理：<ul>\n<li>用户请求致使Servlet容器调用Servlet的Service（）方法，并传入一个ServletRequest对象和一个ServletResponse对象。ServletRequest对象和ServletResponse对象都是由Servlet容器（例如TomCat）封装好的，并不需要程序员去实现，程序员可以直接使用这两个对象。</li>\n<li>ServletRequest中封装了当前的Http请求，因此，开发人员不必解析和操作原始的Http数据。ServletResponse表示当前用户的Http响应，程序员只需直接操作ServletResponse对象就能把响应轻松的发回给用户。</li>\n</ul>\n</li>\n<li>Servlet 接口中定义的方法：<ul>\n<li><strong>void init(ServletConfig var1) throws ServletException;</strong> </li>\n<li>ServletConfig getServletConfig();</li>\n<li><strong>void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;</strong> <ul>\n<li>需要实现的核心业务方法</li>\n</ul>\n</li>\n<li>String getServletInfo();</li>\n<li><strong>void destroy();</strong></li>\n<li>关于方法捏调用的对象解析：<ul>\n<li>ServletConfig   传递初始化信息</li>\n<li>ServletRequest   将接受到的信息传递进去</li>\n<li>ServletResponse  将返回的信息封装</li>\n<li><strong>ServletContext</strong> <ul>\n<li>就是通过该对象可以访问到程序的上下文信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>声明周期<ul>\n<li>init（）        创建（创建后可重复调用）<ul>\n<li>当Servlet第一次被请求时，Servlet容器就会开始调用这个方法来初始化一个Servlet对象出来，但是这个方法在后续请求中不会在被Servlet容器调用，就像人只能“出生”一次一样。我们可以利用init（ ）方法来执行相应的初始化工作。调用这个方法时，Servlet容器会传入一个ServletConfig对象进来从而对Servlet对象进行初始化。</li>\n</ul>\n</li>\n<li>service（） 调用</li>\n<li>destroy（） 摧毁<ul>\n<li>destory,当要销毁Servlet时，Servlet容器就会调用这个方法，就如人一样，到时期了就得死亡。在卸载应用程序或者关闭Servlet容器时，就会发生这种情况，一般在这个方法中会写一些清除代码。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Servlet的使用更迭<ul>\n<li><strong>GenericServlet</strong> implements <strong>Servlet</strong> <ul>\n<li>1.为Servlet接口中的所有方法提供了默认的实现，则程序员需要什么就直接改什么，不再需要把所有的方法都自己实现了。</li>\n<li>2.提供方法，包围ServletConfig对象中的方法。</li>\n</ul>\n</li>\n<li><strong>HttpServlet</strong> extends <strong>GenericServlet implements Serializable</strong>  </li>\n<li>HttpServlet之所以运用广泛的另一个原因是现在大部分的应用程序都要与HTTP结合起来使用。这意味着我们可以利用HTTP的特性完成更多更强大的任务。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h3><ul>\n<li><p>是什么</p>\n<ul>\n<li>个人理解为连接的中间层</li>\n<li><strong>JDBC的全称是Java数据库连接(Java Database connect)，它是一套用于执行SQL语句的Java API。</strong></li>\n</ul>\n</li>\n<li><p>作用</p>\n<ul>\n<li><strong>应用程序可通过这套API连接到关系数据库，并使用SQL语句来完成对数据库中数据的查询、更新和删除等操作。</strong></li>\n</ul>\n</li>\n<li><p>构成</p>\n<ul>\n<li>JDBC驱动管理器：负责注册特定的JDBC驱动器，主要通过java.sql. Driver Manager类实现。 </li>\n<li>JDBC驱动器API：由Sun公司负责制定，其中最主要的接口是java.sql. Driver接口。 </li>\n<li>JDBC驱动器：它是一种数据库驱动，由数据库厂商创建，也称为JDBC驱动程序JDBC驱动器实现了JDBC驱动器API，负责与特定的数据库连接，以及处理通信细节。</li>\n</ul>\n</li>\n<li><p>具体获得连接操作：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Example01 &#123;\n    public static void main(String[] args) throws SQLException &#123;\n        &#x2F;&#x2F;1.注册数据库的驱动\n        DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n        &#x2F;&#x2F;2.通过 DriverManager获取数据库连接\n        String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;chapter01&quot;;\n        String usernames&#x3D;&quot;root&quot;;\n        String password&#x3D;&quot;itcast&quot;;\n        Connection conn&#x3D;DriverManager.getConnection(url, username, password);\n        &#x2F;&#x2F;3.通过 Connection对象获取 Statement对象\n        Statement stmt&#x3D; conn.createStatement();\n        &#x2F;&#x2F;4.使用 Statement执行SQL语句\n        String sql&#x3D;&quot;select * from users&quot;;\n        ResultSet rs&#x3D;stmt.executeQuery(sql);\n        &#x2F;&#x2F;5、操作 ResultSet结果集\n        System.out.println(&quot;id|name|password|email|birthday&quot;);\n        while (rs.next()) &#123;\n            int id&#x3D;rs.getInt(&quot;id&quot;);     &#x2F;&#x2F;通过列名获取指定字段的值\n            String name&#x3D;rs.getString(&quot;name&quot;);\n            String psw&#x3D;rs.getString(&quot;password&quot;);\n            String email&#x3D;rs.getString(&quot;email&quot;);\n            Date birthday&#x3D;rs.getDate(&quot;birthday&quot;);\n            System.out.println(id+&quot;|&quot;+name+&quot;|&quot;+psw+&quot;|&quot;+email+&quot;|&quot;+birthday); \n        &#125;\n        &#x2F;&#x2F;6.回收数据库\n        rs.close();\n        stmt.close();\n        conn.close();\n    &#125;\n&#125;</code></pre></li>\n</ul>\n<h2 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h2><ul>\n<li>MVC三层架构<ul>\n<li>M: model层<ul>\n<li>dao<ul>\n<li>与数据库进行交互，填写相关sql语句</li>\n</ul>\n</li>\n<li>service<ul>\n<li>编辑核心业务，然后进行封装，用于contro层的调用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>V：view层<ul>\n<li>视图层，通过JSP技术，进行前端页面的动态展示</li>\n</ul>\n</li>\n<li>C：controller层<ul>\n<li>控制层，通过sevlet实现业务的调配工作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><p>似乎在github上面搭建的博客有点bug，链接图片无法显示，所以这部分就只能省略</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li>该项目是第一个实战项目，虽然使用的技术栈很老，但是也清晰的从底层了解了一些web后端的过程，其次从架构上，通过MVC三层架构进行了解，虽然现在都是微服务架构，但是MVC这种单体架构自己可以了解，增强对程序开发流程的认知。这个项目算是自己编程的入门吧。</li>\n</ul>\n","text":"SBMS项目笔记前置知识Servlet 是什么 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类 （一般开发都继承Httpservlet来实现） 作用 主要功能在于交互式地浏览和修改数据 理解： 在MVC三层架构中，...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SBMS%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">SBMS项目笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Servlet\"><span class=\"toc-text\">Servlet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JDBC\"><span class=\"toc-text\">JDBC</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">项目架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">具体代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol></li></ol>","author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"docker","date":"2021-05-16T05:48:25.000Z","updated":"2022-05-05T02:59:05.789Z","comments":true,"path":"api/articles/docker.json","keywords":null,"cover":"https://wx4.sinaimg.cn/mw1024/008srJVCly1h1xbq920sfj31hc0u0407.jpg","text":"Docker概述 是什么 是一款容器引擎，是一个用于开发，交付和运行应用程序的开放平台 作用 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 （应用和相关依赖环境一起打包到容器当中）解决...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CloudComputing-初识","uid":"8abdb583e8b93346cd23da8d5b3ea2a5","slug":"cloudComputing","date":"2021-04-26T05:48:25.000Z","updated":"2022-05-05T04:33:30.449Z","comments":true,"path":"api/articles/cloudComputing.json","keywords":null,"cover":"https://wx1.sinaimg.cn/mw1024/008srJVCly1h1xbq4prmwj31400qb41l.jpg","text":"云计算 是什么 网络+计算 在服务角度层面： 像自来水一样提供基础的算力服务，Iass Pass Sass 技术层面来说 以虚拟化为核心技术进行资源池化，以云管理平台对资源进行调配实现云计算的技术 服务的三层平台理解 三层模型 Iass 提供底层的硬件资源 Pass 提供平台应用...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"CloudComputing","slug":"CloudComputing","count":1,"path":"api/categories/CloudComputing.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}