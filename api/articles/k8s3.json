{"title":"监控系统","uid":"d92ff721ecc7f2b8c5a903b25ff0b67c","slug":"k8s3","date":"2022-07-17T15:22:34.206Z","updated":"2022-07-17T15:24:53.456Z","comments":true,"path":"api/articles/k8s3.json","keywords":null,"cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>监控是整个运维乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供详细的数据用于追查定位问题都依赖于监控，随着PASS层的落地，微服务架构的兴起，监控更是不可缺少的一环，而监控不仅仅是一个组件，而是一个体系，系统，需要有一个完善的生态系统来支撑。通过本文，我们能大概了解目前行业内监控系统的总体架构。</p>\n<h1 id=\"监控系统构成\"><a href=\"#监控系统构成\" class=\"headerlink\" title=\"监控系统构成\"></a>监控系统构成</h1><ul>\n<li><p>基本的监控系统需要具备以下功能：</p>\n</li>\n<li><ul>\n<li>数据采集</li>\n<li>数据存储</li>\n<li>数据查询</li>\n<li>数据展示</li>\n<li>异常触发</li>\n<li>报警发送</li>\n</ul>\n</li>\n</ul>\n<p>暂时无法在飞书文档外展示此内容</p>\n<p>每个部分具有不同的特点，负责不同的职责。</p>\n<h1 id=\"流程详解\"><a href=\"#流程详解\" class=\"headerlink\" title=\"流程详解\"></a>流程详解</h1><ul>\n<li><h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2></li>\n<li><ul>\n<li><p>故名思义，数据采集就是监控系统的眼睛，是监控数据的来源，而目前数据采集主要有2种模式，分为别为：<strong>主动推送</strong>和<strong>被动拉取</strong>，这两种方式通常没有绝对的优劣，只是有各自不同的应用场景</p>\n<ul>\n<li><strong>主动推送：</strong><ul>\n<li>由被监控的组件主动上报监控的指标给数据存储部分</li>\n<li>优点<ul>\n<li>不存在目标发现问题，新应用上线后自动可以加入监控</li>\n<li>监控系统架构简单，应用只需调用接口上报数据即可</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>缺乏准确的需要监控的目标数</li>\n<li>难以区分合法和非法的数据上报（权限验证可以有所帮助）</li>\n<li>当数据没有准时推送时，监控很难判断是应用overload或者dead了</li>\n<li>时钟不同步导致的时间序列对齐问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>被动拉取：</strong><ul>\n<li>由特定的组件主动的去采集相关的探测信息</li>\n<li>优点：<ul>\n<li>所有时间序列都是对齐的</li>\n<li>知道需要抓取的准确目标数</li>\n<li>容易区分应用overload或者dead，通过记录每次抓取花费的时间</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>需要额外机制发现新添加的监控目标</li>\n<li>需要更复杂的library或者agent给应用吐数据</li>\n<li>难以监控short-live的应用，比如cronjob</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>个人理解：</p>\n<ul>\n<li><p>无论是主动推送还是被动拉取，二者各有所长，各有所短。但是我们观察市场的选择后，大部分主要的监控系统采用被动拉取的方式采集数据，比如在promthus中，总体用retreival组件进行拉取数据，但针对于short-live的的应用，会先主动推送到Push-gateway当中，再由retreival组件进行拉取。</p>\n</li>\n<li><p>在数据采集部分，我们核心的保障是稳定而全面，不能出现负责这部分的组件随意的挂掉而导致数据的缺失，如果我们连数据的来源稳定性都不能保证，后续的相关组件调优也失去了意义。</p>\n</li>\n<li><p><img src=\"https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=MjRhZTczZmJhZjIyYTA0MzU2ZjQ1ZTMxNjg4ZjAxNzNfYmhmd2ZrWHVSQzl0R2E4UjRiTkY0T0xaUHZwV1ZWaU5fVG9rZW46Ym94Y25lUWpQOEdmNVhvVWFTZ21uNUJjbkdlXzE2NTgwNzA5MDU6MTY1ODA3NDUwNV9WNA\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"数据的存储与查询\"><a href=\"#数据的存储与查询\" class=\"headerlink\" title=\"数据的存储与查询\"></a>数据的存储与查询</h2></li>\n<li><ul>\n<li><p>数据的存储是一个老生常谈的话题，而在集群监控中，首先我们得了解监控数据的特点：时间序列（或称动态数列）是指将同一统计指标的数值按其发生的时间先后顺序排列而成的数列。在探测到指标后，我们将探测的指标以打上时间标记，然后进行存储。我们了解存储数据的特点后，就可以引出我们的TSDB（Time Series Database）时间序列数据库，关于其详细的介绍，可以看下面引用的博客  <a href=\"https://www.jianshu.com/p/31afb8492eff\">时间序列数据库 (TSDB)</a></p>\n</li>\n<li><p>似乎凡事和数据库相关的话题总是离不考调优，比如正对于TSDB的特点我们可以</p>\n<ul>\n<li><p>冷热数据分离： 期的数据是最容易被查询的，可以增加内存存储的replica数（Bigtable&#x2F;HBase)，历史数据可以放在硬盘上</p>\n</li>\n<li><p>资源隔离：不同部门时间序列数据存储在不同server上，减少相互影响。</p>\n</li>\n<li><p>​    等方式进行简单的优化，但是我们之所以提出优化的概念的目的是强调TSDB的查询性能直接影响了我们的数据分析以及相关异常提取等相关工作，所以拥有一个性能良好的TSDB也是优秀监控系统必备条件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"数据展示\"><a href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"></a>数据展示</h2></li>\n<li><ul>\n<li><p>有了监控的数据后，我们得观察这些数据，消费这些数据,其中的一条链路就是数据的展示，而目前有grafana这种图形化的组件进行数据的展示</p>\n</li>\n<li><p><img src=\"https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=MzRkODJiMTMzYTYwODUwMTRhN2M5OWZhNmI1ZWI1MzVfRjhucFJrMjZySHVZc1dFODVYZlF3ME85MUJ6ajRaOTNfVG9rZW46Ym94Y25nSHdXaU9xMEE2aWowd2VuenQ2RjBjXzE2NTgwNzA5MDU6MTY1ODA3NDUwNV9WNA\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><h2 id=\"异常触发\"><a href=\"#异常触发\" class=\"headerlink\" title=\"异常触发\"></a><strong>异常触发</strong></h2></li>\n<li><ul>\n<li>​       数据采集到了，也存储好了，图表展示也没有问题了，但是没人会愿意每天盯着图表去发现问题，就算盯着图表，也不一定能发现问题，根据历史经验，通过定义一些条件触发某些动作的需求应运而生。 也就是我们的异常触发。</li>\n<li>​      对于异常触发，我们可以简单的理解为我们规定了异常的条件和对应的操作，如果发生了对应的异常，则会触发相应的异常处理操作，我们可以把这一步操作理解为一个简单的自动化运维过程，发生异常，自动解决异常，嗯，看似很美好，但目前的发展智能处理一些常规的问题，并没有达到通吃的阶段，所以当处理操作仍然失效后，我们就得上报给人工，由运维人员来解决。当然，涉及到运维的警戒线水位一般低于业务支持的警戒水位线，所以接下来的人工操作是业务保证的最后一道防线。</li>\n</ul>\n</li>\n</ul>\n<p>参考文档</p>\n<p><a href=\"https://toutiao.io/posts/343095/app_preview\">贵司的监控系统处于什么时代? - 运维帮精选 - 开发者头条</a></p>\n","feature":false,"text":"前言监控是整个运维乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供详细的数据用于追查定位问题都依赖于监控，随着PASS层的落地，微服务架构的兴起，监控更是不可缺少的一环，而监控不仅仅是一个组件，而是一个体系，系统，需要有一个完善的生态系统来支撑。通过本文，我们能...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%9E%84%E6%88%90\"><span class=\"toc-text\">监控系统构成</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">流程详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86\"><span class=\"toc-text\">数据采集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">数据的存储与查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">数据展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E8%A7%A6%E5%8F%91\"><span class=\"toc-text\">异常触发</span></a></li></ol></li></ol>","author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Start","uid":"e38905ad1968dd93d6be591395b50e19","slug":"strat","date":"3333-03-27T05:48:25.000Z","updated":"2022-05-05T10:41:00.147Z","comments":true,"path":"api/articles/strat.json","keywords":null,"cover":"https://scpic.chinaz.net/files/pic/pic9/201803/wpic078.jpg","text":"谨以此站记录本人知识积累——Stay hungry Stay foolish","link":"","photos":[],"count_time":{"symbolsCount":45,"symbolsTime":"1 mins."},"categories":[{"name":"Begin","slug":"Begin","count":1,"path":"api/categories/Begin.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"K8s-集群监控","uid":"436f5c4cd9584648ea4f3adf32eabb95","slug":"k8s4","date":"2022-06-29T10:49:36.000Z","updated":"2022-07-17T15:25:16.217Z","comments":true,"path":"api/articles/k8s4.json","keywords":null,"cover":"https://pic4.zhimg.com/v2-562267b2cf39fded4c66640ac37ee818_1440w.jpg?source=172ae18b","text":" 背景随着k8s的崛起，我们迎来了PASS层的落地，服务的部署愈发方便，但为服务提供支持的架构却愈发具有挑战性，在k8s中，多个服务和命名空间可以跨基础设施分布，每个服务都是由 pods 组成，而 pod 可以包含一个或多个容器。从底层服务的架构来说是变得复杂，所以为了更好的掌握...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"K8s","slug":"K8s","count":4,"path":"api/categories/K8s.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP-C.HOHe3l1T_0UEexBraXs53wAAAA?w=169&h=176&c=7&r=0&o=5&dpr=1.38&pid=1.7","link":"/","description":"<h5>This is my own blog to     share my knowledge</h5>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}