{"title":"Java-数组","uid":"fc1d81b19b3e79145fb3db27c32bb9d6","slug":"java3","date":"2021-04-03T05:48:25.000Z","updated":"2022-05-05T02:59:57.568Z","comments":true,"path":"api/articles/java3.json","keywords":null,"cover":"https://wx1.sinaimg.cn/mw1024/008srJVCly1h1xbqioae2j31gi0u0god.jpg","content":"<ul>\n<li><p><strong>数组（掌握操作方法）</strong></p>\n<ol>\n<li><p>数组是用来存储固定长度的同类型元素 </p>\n<ul>\n<li>注意：<ul>\n<li>如果存储的为引用数据类型时，<strong>改变值时，实际是创建新的值并改变指针指向</strong>（常见于字符串数组，因为字符串无法改变）</li>\n<li>所以关于字符串数组排序后，<strong>改变的不是值的顺序，而知指针的顺序</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>数组的操作</strong></p>\n<ul>\n<li><p>定义</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int[] arr &#x3D; new int[9];\n\nint [] ar &#x3D; &#123;1,2,3,4,5,6&#125;;  &#x2F;&#x2F;初始化</code></pre>\n</li>\n<li><p>相关类（Arrays）进行操作</p>\n<ul>\n<li><p>Arrys.<strong>equals(long[] a, long[] a2)</strong></p>\n<ul>\n<li>判断两个数组是否相等</li>\n</ul>\n</li>\n<li><p>Arrys.<strong>fill(int[] a, int val)</strong>     在数组中填充相同数字</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Arrays.fill(nums, 1);\n\nArrays.fill(nums,2,5,3);\n&#x2F;&#x2F;对数组的部分元素填充一个值,从起始位置到结束位置，取头不取尾</code></pre>\n</li>\n<li><p>Arrys.<strong>sort(Object[] a)</strong>      </p>\n<ul>\n<li>为数组进行排序（升序）</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Arrays.sort(nums, 0, 4);  指定索引进行排序\nArrays.sort(nums);  &#x2F;&#x2F;全部排序</code></pre>\n</li>\n<li><p>Arrays.<strong>toString(Object[] array)</strong> </p>\n<ul>\n<li><strong>实际作用是方便的显示数组，不需要用循环遍历再去显示数组内容</strong></li>\n</ul>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int[] lsit &#x3D; &#123;3,8,5,65,34,27&#125;;\nSystem.out.println(list.toString()); &#x2F;&#x2F;打印数组地址\nSystem.out.println(list）;           &#x2F;&#x2F;打印数组地址\nSystem.out.println(Arrays.toString(array)); &#x2F;&#x2F;打印数组内容</code></pre>\n</li>\n<li><p>Arrays.<strong>deepToString(Object[][] arrays)</strong> </p>\n<ul>\n<li>显示多维数组</li>\n</ul>\n</li>\n<li><p>Arrys. <strong>binarySearch(Object[] a, Object key)</strong> </p>\n<ul>\n<li>返回相应值的索引</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>遍历</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>for</p>\n</li>\n<li><p>for each</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(type element: array)\n&#123;\n    System.out.println(element);\n&#125;</code></pre></li>\n</ol></blockquote>\n</li>\n<li><p>排序</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Sort &#123;\n&#x2F;&#x2F;冒泡排序\n    static void sort_maopao(int[] arg)&#123;\n\n        for (int i &#x3D; 0; i &lt; arg.length-1; i++) &#123;\n            for (int j &#x3D; 0; j &lt; arg.length-i-1; j++) &#123;\n                if (arg[j]&gt;arg[j+1])&#123;\n                    int temp;\n                    temp &#x3D; arg[j];\n                    arg[j] &#x3D; arg[j+1];\n                    arg[j+1] &#x3D; temp;\n                &#125;\n\n            &#125;\n\n        &#125;\n\n    &#125;\n&#x2F;&#x2F;选择排序\n    static void sort_select(int[] arg)&#123;\n        for(int i&#x3D;0; i&lt;arg.length-1;i++)&#123;\n            int min &#x3D; i;\n            for (int j&#x3D;i+1;j&lt;arg.length;j++)&#123;\n                if (arg[min] &gt; arg[j])&#123;\n                    min &#x3D; j;\n                &#125;\n            &#125;\n            if(i !&#x3D; min)&#123;\n                int temp;\n                temp &#x3D; arg[min];\n                arg[min] &#x3D; arg[i];\n                arg[i] &#x3D; temp;\n            &#125;\n\n        &#125;\n    &#125;\n&#x2F;&#x2F;插入排序    \n    static void sort_insert(int[] arg)&#123;\n        for (int i &#x3D;1;i &lt;arg.length;i++)&#123;\n            int value &#x3D; arg[i];\n            int position &#x3D;i;\n            while (position &gt;0 &amp;&amp; arg[position-1] &gt; value)&#123;\n                arg[position] &#x3D; arg[position - 1];\n                position--;\n            &#125;\n            arg[position] &#x3D; value;\n        &#125;\n    &#125;\n&#x2F;&#x2F;快速排序\n    static void sort_quick(int[] arg, int left, int right)&#123;\n        if (left &lt; right)&#123;\n            int mid &#x3D; get_mid(arg,  left,  right);\n            sort_quick(arg,left,mid-1);\n            sort_quick(arg,mid+1,right);\n        &#125;\n    &#125;\n\n    static int get_mid(int[] arg, int left, int right)&#123;\n        int pivot &#x3D; arg[left];\n        while (left &lt; right)&#123;\n            while (left &lt;right &amp;&amp; arg[right]&gt;pivot)&#123;\n                right--;\n            &#125;\n            arg[left] &#x3D; arg[right];\n            while (left &lt;right &amp;&amp; arg[left] &lt;pivot)&#123;\n                left++;\n            &#125;\n            arg[right] &#x3D;arg[left];\n        &#125;\n        arg[left] &#x3D; pivot;\n        return left;\n    &#125;\n\n&#125;\n</code></pre>\n\n<ul>\n<li>查找</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;二分查找\nstatic int  binary_search(int[] list,int left, int right, int value)&#123;\n        int mid &#x3D; (right - left);\n        if (left &gt; right)&#123;\n            return -1;\n        &#125;else if(list[mid] &gt; value)&#123;\n            right &#x3D; mid -1;\n        &#125;else if(list[mid] &lt; value)&#123;\n            left &#x3D; mid +1;\n        &#125;else &#123;\n            return mid;\n        &#125;\n        return binary_search(list, left, right, value);\n    &#125;</code></pre></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n","text":" 数组（掌握操作方法） 数组是用来存储固定长度的同类型元素 注意： 如果存储的为引用数据类型时，改变值时，实际是创建新的值并改变指针指向（常见于字符串数组，因为字符串无法改变） 所以关于字符串数组排序后，改变的不是值的顺序，而知指针的顺序 数组的操作 定义 int[] arr &...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"toc":"","author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java-字符串","uid":"f074b92e2bf809e27da1254814ebde33","slug":"java4","date":"2021-04-05T05:48:25.000Z","updated":"2022-05-05T03:00:05.864Z","comments":true,"path":"api/articles/java4.json","keywords":null,"cover":"https://wx1.sinaimg.cn/mw1024/008srJVCly1h1xbqioae2j31gi0u0god.jpg","text":"String类 String 创建的两种方法以及原理浅析：（重点） 直接创建 构造函数创建 String s1 &#x3D; &quot;Runoob&quot;; &#x2F;&#x2F; String 直接创建 String s2 &#x3D; &quot;Runoob&qu...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[],"author":{"name":"Hubert","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"This is my own blog to     share my knowledge","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}